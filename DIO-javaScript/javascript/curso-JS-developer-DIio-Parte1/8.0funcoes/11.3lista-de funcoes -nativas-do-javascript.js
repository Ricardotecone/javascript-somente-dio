// Lista de Fun√ß√µes Nativas do Javascript

// üöÄ Fun√ß√µes Nativas do JavaScript: Um Guia Pr√°tico üöÄ
// JavaScript, a linguagem de programa√ß√£o padr√£o da web, oferece uma ampla gama de fun√ß√µes nativas
// que facilitam a intera√ß√£o com o usu√°rio, manipula√ß√£o de dados, requisi√ß√µes HTTP e muito mais.
// Neste guia, exploramos algumas dessas fun√ß√µes e suas utilidades.

// Fun√ß√µes para intera√ß√£o com o usu√°rio:
// alert(): Exibe uma mensagem para o usu√°rio em uma caixa de di√°logo.
// confirm(): Exibe uma mensagem com op√ß√µes "OK" e "Cancelar" para o usu√°rio confirmar uma a√ß√£o.
// prompt(): Solicita que o usu√°rio insira um texto.
// Fun√ß√µes para depura√ß√£o e registro:
// console.log(): Exibe mensagens de depura√ß√£o no console do navegador ou Node.js.
// Fun√ß√µes para convers√£o de tipos:
// parseInt(): Converte uma string em um n√∫mero inteiro.
// parseFloat(): Converte uma string em um n√∫mero de ponto flutuante.
// String(): Converte um valor em uma string.
// Number(): Converte um valor em um n√∫mero.
// isNaN(): Verifica se um valor n√£o √© um n√∫mero.
// Fun√ß√µes para manipula√ß√£o de arrays:
// Array.from(): Cria uma nova inst√¢ncia de Array a partir de um objeto semelhante a um array.
// Array.isArray(): Verifica se um valor √© um array.
// Array.prototype.push(): Adiciona elementos ao final de um array.
// Array.prototype.pop(): Remove o √∫ltimo elemento de um array.
// E muitas outras...
// Fun√ß√µes para manipula√ß√£o de strings:
// String.prototype.includes(): Verifica se uma string cont√©m outra string.
// String.prototype.split(): Divide uma string em substrings com base em um separador.
// String.prototype.trim(): Remove espa√ßos em branco do in√≠cio e do final de uma string.
// E outras mais...
// Fun√ß√µes para manipula√ß√£o de n√∫meros:
// Math.abs(): Retorna o valor absoluto de um n√∫mero.
// Math.max(): Retorna o maior de zero ou mais n√∫meros.
// Math.random(): Retorna um n√∫mero pseudoaleat√≥rio entre 0 e 1.
// E mais...
// Requisi√ß√µes HTTP:
// fetch(): Para fazer requisi√ß√µes HTTP ass√≠ncronas para APIs ou outros recursos na web.
// XMLHttpRequest(): Uma alternativa mais antiga ao fetch().
// Bibliotecas para Requisi√ß√µes HTTP:
// axios(): Uma biblioteca popular para fazer requisi√ß√µes HTTP.
// Manipula√ß√£o de Dados:
// FormData(): Para criar objetos de formul√°rio que podem ser enviados em requisi√ß√µes HTTP.
// JSON.stringify(): Para converter objetos JavaScript em strings JSON.
// JSON.parse(): Para converter strings JSON em objetos JavaScript.
// Tratamento de Erros:
// try...catch: Utilizado para capturar exce√ß√µes e erros durante a execu√ß√£o de c√≥digo.
// Headers de Requisi√ß√£o:
// Headers(): Para criar objetos de cabe√ßalho de requisi√ß√£o.
// Autentica√ß√£o:
// Bearer Token: Um m√©todo comum de autentica√ß√£o em APIs.
// Upload de Arquivos:
// FormData(): Pode ser usado para enviar arquivos em requisi√ß√µes POST.
// Cache de Requisi√ß√µes:
// Cache API: Permite armazenar em cache recursos da web.
// Pagina√ß√£o, Ordena√ß√£o, Filtros e Versionamento:
// S√£o t√©cnicas comuns em APIs para gerenciar resultados e compatibilidade.
// CORS (Cross-Origin Resource Sharing) e Tratamento de Tempo de Resposta:
// S√£o importantes para garantir a seguran√ßa e efici√™ncia das requisi√ß√µes HTTP.
// Refresh Tokens e Encadeamento de Requisi√ß√µes:
// S√£o √∫teis para manter a sess√£o do usu√°rio ativa e para opera√ß√µes complexas com m√∫ltiplas requisi√ß√µes.
// Com essas fun√ß√µes nativas e t√©cnicas avan√ßadas, desenvolver aplica√ß√µes web robustas e interativas torna-se
// uma tarefa acess√≠vel e poderosa com JavaScript.